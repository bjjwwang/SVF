name: svf-windows-build

on: [push]

env:
  SVF_CTIR: 1
  SVF_Z3: 1
  SVF_DIR: $GITHUB_WORKSPACE
  LLVM_URL: "https://github.com/bjjwwang/SVF-LLVM/releases/download/16.0.0/llvm-windows-build.zip"
  Z3_URL: "https://github.com/Z3Prover/z3/releases/download/z3-4.15.0/z3-4.15.0-x64-win.zip"
  INSTALL_DIR: ${{ github.workspace }}/install

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download and extract LLVM
        run: |
          Invoke-WebRequest -Uri $env:LLVM_URL -OutFile llvm.zip
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\llvm-windows-build"
          Expand-Archive -Path llvm.zip -DestinationPath "$env:GITHUB_WORKSPACE\llvm-windows-build" -Force
          $env:LLVM_DIR = "$env:GITHUB_WORKSPACE\llvm-windows-build"
          echo "LLVM_DIR=$env:LLVM_DIR" >> $env:GITHUB_ENV

      - name: Download and extract Z3
        run: |
          Invoke-WebRequest -Uri $env:Z3_URL -OutFile z3.zip
          Expand-Archive -Path z3.zip -DestinationPath .
          $env:Z3_DIR = "$env:GITHUB_WORKSPACE\z3-4.15.0-x64-win"
          echo "Z3_DIR=$env:Z3_DIR" >> $env:GITHUB_ENV

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.23.0'

      - name: Build SVF
        run: |
          mkdir build
          cd build
          $cmakeArgs = @(
            "..",
            "-G", "Ninja",
            "-DCMAKE_BUILD_TYPE=Debug",
            "-DLLVM_DIR=$env:LLVM_DIR",
            "-DZ3_DIR=$env:Z3_DIR",
            "-DSVF_USE_PIC=ON",
            "-DBUILD_SHARED_LIBS=OFF",
            "-DSVF_ENABLE_RTTI=ON",
            "-DCMAKE_INSTALL_PREFIX=$env:INSTALL_DIR"
          )
          cmake $cmakeArgs
          cmake --build . --config Debug
          cmake --install .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: svf-windows
          path: ${{ env.INSTALL_DIR }}
          retention-days: 5

      - name: Clone SVF-windows-CI
        run: |
          git clone https://github.com/bjjwwang/SVF-windows-CI.git
          $env:TEST_FILE = "$env:GITHUB_WORKSPACE\SVF-windows-CI\CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c.bc"
          echo "TEST_FILE=$env:TEST_FILE" >> $env:GITHUB_ENV

      - name: Set AE_EXE environment variable
        run: |
          $env:AE_EXE = "$env:INSTALL_DIR\bin\ae.exe"
          echo "AE_EXE=$env:AE_EXE" >> $env:GITHUB_ENV

      - name: Dump AE.exe Dependencies
        shell: pwsh
        run: |
          Write-Host "`n=== Dumping AE.exe Dependencies via dumpbin ==="
          if (-not (Test-Path $env:AE_EXE)) {
            Write-Error "❌ AE_EXE not found at $env:AE_EXE"
            exit 1
          }
          dumpbin /DEPENDENTS $env:AE_EXE

      - name: Verify All Dependent DLLs Exist
        shell: pwsh
        run: |
          Write-Host "`n=== Verifying AE.exe Dependent DLLs ==="
          $aePath = $env:AE_EXE
          $raw = dumpbin /DEPENDENTS $aePath 2>&1
          $dllNames = $raw |
            Select-String -Pattern "\.dll" |
            ForEach-Object { $_.ToString().Trim() }
          if (-not $dllNames) {
            Write-Error "❌ dumpbin 未找到任何 DLL 依赖"
            exit 1
          }
          foreach ($dll in $dllNames) {
            $found = $false
            $aeDir = Split-Path $aePath
            $cand = Join-Path $aeDir $dll
            if (Test-Path $cand) {
              Write-Host "✅ Found in AE directory: $dll"
              $found = $true
            }
            if (-not $found) {
              foreach ($p in $env:PATH.Split(";")) {
                if ([string]::IsNullOrWhiteSpace($p)) { continue }
                $maybe = Join-Path $p $dll
                if (Test-Path $maybe) {
                  Write-Host "✅ Found in PATH: $maybe"
                  $found = $true
                  break
                }
              }
            }
            if (-not $found) {
              Write-Error "❌ Missing DLL: $dll"
            }
          }
          Write-Host "`n=== Dependency verification done ==="

      - name: Run AE.exe and Capture Exit Code
        shell: pwsh
        run: |
          Write-Host "`n=== Running AE.exe to check runtime errors ==="
          $proc = Start-Process $env:AE_EXE -ArgumentList "--help" -NoNewWindow -PassThru -Wait
          $code = $proc.ExitCode
          if ($code -ne 0) {
            Write-Error "❌ AE.exe exited with code $code (possible missing DLL)."
            exit $code
          } else {
            Write-Host "✅ AE.exe --help succeeded with ExitCode = 0"
          }
          Write-Host "`n=== AE.exe runtime check done ==="